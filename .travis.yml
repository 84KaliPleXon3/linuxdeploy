language: cpp
sudo: required

matrix:
  include:
    - env: ARCH=x86_64
      addons:
        apt:
          update: true
          packages:
            - libmagic-dev
            - libjpeg-dev
            - libpng-dev
            - cimg-dev
            - automake  # required for patchelf
    - env: ARCH=i386
      addons:
        apt:
          update: true
          packages:
            - libmagic-dev:i386
            - libjpeg-dev:i386
            - libpng-dev:i386
            - gcc-multilib
            - g++-multilib
            - automake  # required for patchelf
            - libfuse2:i386
            - libcairo2:i386
    - env: ARCH=x86_64 BUILD_TYPE=coverage
      addons:
        apt:
          update: true
          packages:
          - libmagic-dev
          - libjpeg-dev
          - libpng-dev
          - cimg-dev
      install:
        # we don't need patchelf for building and running the tests
        - sudo pip install gcovr
      script: travis/test-coverage.sh
      after_success: true  # also, we don't intend to upload release binaries
    - env: ARCH=i386 BUILD_TYPE=coverage
      addons:
        apt:
          update: true
          packages:
          - libmagic-dev:i386
          - libjpeg-dev:i386
          - libpng-dev:i386
          - gcc-multilib
          - g++-multilib
          - libfuse2:i386
          - libcairo2:i386
      install:
        # we don't need patchelf for building and running the tests
        - sudo pip install gcovr
      script: travis/test-coverage.sh
      after_success: true  # also, we don't intend to upload release binaries


install:
  - git clone https://github.com/NixOS/patchelf.git -b 0.8
  - cd patchelf
  - ./bootstrap.sh
  - if [ "$ARCH" == "i386" ]; then ./configure --prefix=/usr --build=i686-pc-linux-gnu CFLAGS=-m32 CXXFLAGS=-m32 LDFLAGS=-m32; fi
  - if [ "$ARCH" == "x86_64" ]; then ./configure --prefix=/usr; fi
  - make -j$(nproc)
  - sudo make install
  - cd ..
  - rm -rf patchelf

script:
  - travis/build.sh

after_success:
  - ls -lh
  # make sure only pushes to rewrite create a new release, otherwise pretend PR and upload to transfer.sh
  - if [ "$TRAVIS_BRANCH" != "$TRAVIS_TAG" ] && [ "$TRAVIS_BRANCH" != "master" ]; then export TRAVIS_EVENT_TYPE=pull_request; fi
  - wget -c https://github.com/probonopd/uploadtool/raw/master/upload.sh
  - bash upload.sh linuxdeploy-"$ARCH".AppImage*

branches:
  except:
    - # Do not build tags that we create when we upload to GitHub Releases
    - /^(?i:continuous)$/
